      Module 3 SQL 
			
// Define the Tables 

## First Create a Database 
query : CREATE DATABASE sql_training_hotwax ;
Query OK, 1 row affected (0.48 sec)

## Check if database is created or not 
query : SHOW DATABASES ; 
output :
+---------------------------------+
|          Database               |
+---------------------------------+
| sql_training_hotwax             |
| sys                             |
| world                           |
+---------------------------------+

## Use this Databases
query : USE sql_training_hotwax ;
Database changed

## Create a table Salespeople ;
query:
CREATE TABLE Salespeople (
    SNUM int NOT NULL ,
    SNAME varchar(255) ,
    CITY varchar(255) ,
    COMM int,
    PRIMARY KEY (SNUM)
    ) ;
Query OK, 0 rows affected (4.43 sec)


## Insert the Data into SalesPeople Table
query ;
INSERT INTO Salespeople VALUES
    (1001,'peel','London',12),
    (1002,'Serres,'SanJose'13);
    (1004,'Motika','London',11),
    (1007,'RifKin','Barcelona',15),
    (1003,'AxelRod','New York',10),
    (1008,'Fran','London',25) ;
Query OK, 6 rows affected (0.16 sec)
Records: 6  Duplicates: 0  Warnings: 0


## Create a table Customers and Orders ;

// Customer Table 
CREATE TABLE Customers (
    CNUM int NOT NULL ,
    CNAME varchar(255) ,
    CITY varchar(255) ,
    RATING int,
    SNUM int ,
    PRIMARY KEY (CNUM),
    FOREIGN KEY (SNUM) REFERENCES Salespeople(SNUM)
) ;

// Orders Table 
CREATE TABLE Orders (
    ONUM int NOT NULL ,
    AMT Decimal(18 , 2) ,
    ODATE varchar(10)  ,
    CNUM int,
    SNUM int ,
    PRIMARY KEY(ONUM) ,
    FOREIGN KEY (CNUM) REFERENCES Customers(CNUM) ,
    FOREIGN KEY (SNUM) REFERENCES Salespeople(SNUM)
    ) ;
		
## Insert Data into Customers and Orders table 

// Insert data into Customers Table 
INSERT INTO Customers VALUES
    (2001,'Hoffman','London',100,1001),
    (2002,'Giovanni','Rome',200,1003),
    (2003,'Liu','Sanjose',200,1002),
    (2004,'Grass','Berlin',300,1002),
    (2006,'Clemens','London',100,1001),
    (2008,'Cisneros','Sanjose',300,1007),
    (2007,'Pereira','Rome',100,1004) ;
		
// Insert data into Orders Table 
INSERT INTO Orders VALUES
    (3001,18.69,'10/03/90',2008,1007),
    (3003,767.19,'10/03/90',2001,1001),
    (3002,1900.10,'10/03/90',2007,1004),
    (3005,5160.45,'10/03/90',2003,1002),
    (3006,1098.16,'10/03/90',2008,1007),
    (3009,1713.23,'10/04/90',2002,1003),
    (3007,75.75,'10/04/90',2004,1002),
    (3008,4723.00,'10/05/90',2006,1001),
    (3010,1309.95,'10/06/90',2004,1002),
    (3011,9891.88,'10/06/90',2006,1001) ;
		
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLVE THE FOLLOWING QUERIES 

1) List all the columns of the Salespeople table.
SELECT * FROM Salespeople ;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+
6 rows in set (0.00 sec)

2) List all customers with a rating of 100. 
 SELECT * FROM CUSTOMERS WHERE RATING = 100 ;
 output:
 +------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

3) Find the largest order taken by each salesperson on each date. 
 
 SELECT s.SNAME , o.ONUM , o.ODATE , o.AMT FROM Salespeople AS s
 INNER JOIN
 orders AS o
 WHERE o.snum = s.snum AND
 o.amt IN (SELECT MAX(amt) FROM orders GROUP BY odate) ;
 
 output:
+---------+------+----------+---------+
| SNAME   | ONUM | ODATE    | AMT     |
+---------+------+----------+---------+
| Serres  | 3005 | 10/03/90 | 5160.45 |
| Peel    | 3008 | 10/05/90 | 4723.00 |
| AxelRod | 3009 | 10/04/90 | 1713.23 |
| Peel    | 3011 | 10/06/90 | 9891.88 |
+---------+------+----------+---------+

4) Arrange the Order table by descending customer number.

SELECT * FROM orders order by cnum desc ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
+------+---------+----------+------+------+
10 rows in set (0.00 sec)

5) Find which salespeople currently have orders in the order table.

// Without Join
Select * from salespeople where snum in (select snum from orders) ;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)

// With Join
select s.* from salespeople as s
inner join
orders as o where o.snum = s.snum group by s.snum ;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)


6) List names of all customers matched with the salespeople serving them.

select c.cname as Customer , s.sname as ServingBy from customers as c
inner join
Salespeople as s where c.snum = s.snum group by c.snum ;
output:
+----------+-----------+
| Customer | ServingBy |
+----------+-----------+
| Hoffman  | Peel      |
| Liu      | Serres    |
| Giovanni | AxelRod   |
| Pereira  | Motika    |
| Cisneros | RifKin    |
+----------+-----------+

7) Find the names and numbers of all salespeople who have more than one customer.

select sname , snum from salespeople where snum in (select snum from customers group by snum having count(snum) > 1 );
output:
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

8) Count the orders of each of the salespeople and output the results in descending order. 
 
 select s.snum , s.sname , count(o.snum) as count from salespeople as s
 inner join
 orders as o where o.snum = s.snum
 group by o.snum order by count desc ;

 output :
+------+---------+-------+
| snum | sname   | count |
+------+---------+-------+
| 1001 | Peel    |     3 |
| 1002 | Serres  |     3 |
| 1007 | RifKin  |     2 |
| 1003 | AxelRod |     1 |
| 1004 | Motika  |     1 |
+------+---------+-------+

9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose. 

 select * from customers where (select count(city) from customers where city = 'sanjose')>=1 ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

10) Match salespeople to customers according to what city they live in.

select sname , cname , s.city from salespeople as s , customers as c where c.city = s.city ;
output:

+--------+----------+---------+
| sname  | cname    | city    |
+--------+----------+---------+
| Peel   | Hoffman  | London  |
| Motika | Hoffman  | London  |
| Fran   | Hoffman  | London  |
| Serres | Liu      | Sanjose |
| Peel   | Clemens  | London  |
| Motika | Clemens  | London  |
| Fran   | Clemens  | London  |
| Serres | Cisneros | Sanjose |
+--------+----------+---------+

11) Find all the customers in SanJose who have a rating above 200.

select * from customers where city = "sanjose" and rating>=200 ;

output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

12) List the names and commissions of all salespeople in London. 

select sname , comm from salespeople where city = 'london' ;

output:
+--------+------+
| sname  | comm |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+
3 rows in set (0.00 sec)

13) List all the orders of Salesperson Motika from the orders table.
# without join
select * from orders where snum in (select snum from salespeople where sname = "motika") ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
+------+---------+----------+------+------+
1 row in set (0.21 sec)

# with JOIN
select s.sname , o.* from salespeople as s
inner join
orders as o where o.snum = s.snum and s.sname = "motika" ;
output:
+--------+------+---------+----------+------+------+
| sname  | ONUM | AMT     | ODATE    | CNUM | SNUM |
+--------+------+---------+----------+------+------+
| Motika | 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
+--------+------+---------+----------+------+------+

14) Find all customers who booked orders on October 3.

select c.cnum ,c.cname , c.city , o.odate from customers as c
inner join
orders as o where o.cnum = c.cnum and o.odate = "10/03/90" order by c.cnum;
output:
+------+----------+---------+----------+
| cnum | cname    | city    | odate    |
+------+----------+---------+----------+
| 2001 | Hoffman  | London  | 10/03/90 |
| 2003 | Liu      | Sanjose | 10/03/90 |
| 2007 | Pereira  | Rome    | 10/03/90 |
| 2008 | Cisneros | Sanjose | 10/03/90 |
| 2008 | Cisneros | Sanjose | 10/03/90 |
+------+----------+---------+----------+

15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount. 
select onum,sum(amt) as totalAmount ,odate from orders group by odate having totalAmount >= 2000;
output:
+------+-------------+----------+
| onum | totalAmount | odate    |
+------+-------------+----------+
| 3001 |     8944.59 | 10/03/90 |
| 3008 |     4723.00 | 10/05/90 |
| 3010 |    11201.83 | 10/06/90 |
+------+-------------+----------+
3 rows in set (0.03 sec)
