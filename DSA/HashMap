#include<iostream>
// #include<bits/stdc++.h>
using namespace std ;

// A node in map which has three part key,value and address of next node 
class Node
{
    public :
    int key ;
    int value ;
    Node * next ;
    Node(int key , int value )
    {
        this->key = key ;
        this->value = value ;
        next = NULL ;
    }
};

// HashMap Data Structure with User Given Capacity 
class Hashmap
{
    Node **arr;
    int CAPACITY ;
    public: 
    
    // contructor which initialize the members 
    Hashmap(int CAPACITY)
    {
        this->CAPACITY = CAPACITY ;
        arr=new Node *[CAPACITY];
        for(int i=0 ; i<CAPACITY ; i++)
        {
            arr[i]=NULL ;
        }
    }
    
    // hash function which brings key in range 
    int HashFunction(int key)
    {
        return key%CAPACITY ;
    }
    
    // Insert method to Put key value pair in HashMap.
    // To handle Collisions I used Separate Chaining method 
    void Insert(int key , int value)
    {
        int hash_position = HashFunction(key);
        Node * newNode = new Node(key,value);
        if(arr[hash_position] == NULL)
        {
            arr[hash_position] = newNode ;
        }
        else
        {
            Node * temp = arr[hash_position];
            while(temp->next != NULL)
            {
                temp = temp->next ;
            }
            temp->next = newNode ;
        }
    }
    
    // Function to delete the Given key  if present
    void deleteKey(int Key)
    {
        int hash_position = HashFunction(Key);
        if(arr[hash_position]!=NULL)
        {
            Node* temp = arr[hash_position] ;
            if(temp->key == Key)
            {
                arr[hash_position]=temp->next ;
                return ;
            }
            while(temp->next->key != Key && temp->next != NULL)
            {
                temp = temp->next ;
            }
            if(temp->next != NULL)
            {
                temp->next = temp->next->next ;
                cout<<"Operation Successful"<<endl; 
            }
            else
            {
                cout<<"Key is Not Present in the HashMap"<<endl;
            }
        }
        else
        {
            cout<<"Key is Not Present in the HashMap"<<endl; 
        }
    }
    
    // Function to Search the Key in Hashmap 
    void searchKey(int Key)
    {
        int hash_position = HashFunction(Key);
        Node * temp = arr[hash_position];
        while(temp->key!=Key && temp!=NULL)
        {
            temp=temp->next ;
        }
        if(temp->key==Key)
        {
            cout<<"Key-value pair "<<temp->key<<":"<<temp->value<<" is Found "<<endl;
        }
        else
        {
            cout<<"Key Not Found"<<endl;
        }
    }
    
    // Show all the Keys value of HashMap 
    void display() 
    {
        for (int i = 0; i < CAPACITY ; i++) 
        {
            Node* temp = arr[i];
            cout<<"Position "<< i << " is connected to the keys are : ";
            while (temp != NULL) 
            {
                cout<<temp->key<<"->"<<temp->value<<"  ";
                temp = temp->next;
            }
            cout<<endl;
        }
    }
     
    // Get the Value of the Key
    void getValue(int Key)
    {
          int hash_position = HashFunction(Key);
          Node * temp = arr[hash_position];
          if(temp==NULL)
          {
              cout<<"Key Not Found"<<endl;
          }
          else
          {
              while(temp!=NULL && temp->key!=Key)
              {
                  temp=temp->next ;
              }
              if(temp==NULL)
              {
                  cout<<"Key Not Found"<<endl;
              }
              if(temp->key==Key)
              {
                  cout<<"The Value of the Key "<<Key<<" is "<<temp->value<<endl;
              }
              else
              {
                  cout<<"Key Not Found"<<endl;
              }
          }  
        
     }   
};
int main()
{
    int cap ;
    cout<<"Enter the Capacity of the Hashmap "<<endl;
    cin>>cap;
    
    // Create the Instance of the Class
    Hashmap mp(cap)  ;
    int ch = 0 ;
    while(ch!=6)
    {
        // Menu
        cout<<endl;
        cout<<"1. Insert the Key Value Pair in Hashmap"<<endl;
        cout<<"2. Delete the key from the hashmap"<<endl;
        cout<<"3. Search the Key in the HashMap"<<endl;
        cout<<"4. Preview the Hashmap"<<endl;
        cout<<"5. Get the Value of the key in HashMap"<<endl;
        cout<<"6. Exit"<<endl;

        cout<<"Enter Your Choice"<<endl;
        cin>>ch;
        switch(ch)
        {
            case 1:
            {
                int key , value ;
                cout<<"Enter the Key and Value to insert in the map ( Note : Enter key and its value separated by space )"<<endl;
                cin>>key>>value ;
                mp.Insert(key, value);
                break ;
            }
            case 2:
            {
                int key ;
                cout<<"Enter the Key to be Deleted"<<endl;
                cin>>key;
                mp.deleteKey(key);
                break ;

            }
            case 3:
            {
                int key ;
                cout<<"Enter the Key to search"<<endl;
                cin>>key;
                mp.searchKey(key);
                break ;
            }
            case 4:
            {
                mp.display();
                break ;
            }
            case 5:
            {
                int key ;
                cout<<"Enter the Key to get its Value"<<endl;
                cin>>key;
                mp.getValue(key);
                break ;
            }
            case 6:
            cout<<"Exit"<<endl;
            default :
            return 0 ;
        }
    }
    return 0 ;
}
