#include <bits/stdc++.h>
using namespace std;

// Create a Node for the Linked List 
class Node
{
public:
    int data;
    Node *next;

    Node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

// Create Custom Queue Datastructures
class Queue
{
public:
    Node *front;
    Node *rear;

    Queue()
    {
        front = NULL;
        rear = NULL;
    }
    // insert the element in queue
    void enqueue()
    {
        int data;
        cout << "Enter the data: " << endl;
        cin >> data;

        Node *newNode = new Node(data);

        if (rear == NULL)
        {
            rear = front = newNode;
            return;
        }

        rear->next = newNode;
        rear = newNode;
    }

    // Pop the element from queue
    void dequeue()
    {
        if (front == NULL)
        {
            cout<<"Queue is Empty"<<endl;
            return;
        }

        Node *temp = front;
        front = front->next;

        if (front == NULL)
        {
            rear = NULL;
        }

        delete temp;
        cout<<"Operation Successful"<<endl;
    }

    // Update the Value of Queue
    void update()
    {
        int key;
        cout << "Enter the Value to be Changed: " << endl;
        cin >> key;
        int data;
        cout << "Enter the New Value: " << endl;
        cin >> data;

        Node *temp = front;

        while (temp != NULL && temp->data != key)
        {
            temp = temp->next;
        }

        if (temp == NULL)
        {
            cout << "No such key present." << endl;
        }
        else
        {
            temp->data = data;
        }
    }

    // Search the element in Queue
    void search()
    {
        int data;
        cout << "Enter the data to search: " << endl;
        cin >> data;
        Node *temp = front;

        while (temp != NULL)
        {
            if (temp->data == data)
            {
                cout << "Present" << endl;
                return;
            }
            temp = temp->next;
        }

        cout << "Not Present" << endl;
    }

    // print the Queue
    void display()
    {
        Node *temp = front;

        if (!temp)
        {
            cout << "Queue empty" << endl;
        }
        cout << endl;
        while (temp != NULL)
        {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// Driver Function
int main()
{
    Queue q;
    int ch;
    while (ch != 6)
    {
        cout << "1. enqueue " << endl;
        cout << "2. dequeue " << endl;
        cout << "3. update " << endl;
        cout << "4. search " << endl;
        cout << "5. Display" << endl;
        cout << "6. exit" << endl;
        cout << "Enter the Choice" << endl;
        cin >> ch;

        switch (ch)
        {
        case 1:
            q.enqueue();
            break;
        case 2:
            q.dequeue();
            break;
        case 3:
            q.update();
            break;
        case 4:
            q.search();
            break;
        case 5:
            q.display();
            break;
        default:
            return 0  ;
        }
    }
}
